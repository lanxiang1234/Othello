from copy import deepcopy

import numpy as np
import random
import time

COLOR_BLACK = -1
COLOR_WHITE = 1
COLOR_NONE = 0
random.seed(0)

dir = ((-1, 1), (-1, 0), (-1, -1), (0, 1), (1, -1), (1, 0), (1, 1), (0, -1))


class AI(object):
    def __init__(self, chessboard_size, color, time_out):
        self.chessboard_size = chessboard_size
        self.color = color
        self.time_out = time_out
        self.candidate_list = []
        self.Count = 0
        self.direction = []
        self.turnchess = []
        self.step = 0
        self.starttime = 0

    def makemove(self, board, x, y, color):
        board[x][y] = color
        for i in range(8):
            x1 = x + dir[i][0]
            y1 = y + dir[i][1]
            while 0 <= x1 and x1 < 8 and 0 <= y1 and y1 < 8 and board[x1][y1] == -color:
                x1 = x1 + dir[i][0]
                y1 = y1 + dir[i][1]
            if 0 <= x1 and x1 < 8 and 0 <= y1 and y1 < 8 and board[x1][y1] == color:
                while True:
                    x1 = x1 - dir[i][0]
                    y1 = y1 - dir[i][1]
                    if x1 == x and y1 == y:
                        break
                    board[x1][y1] = color

        return board

    # 判断落子是否正确
    def place(self, board, x, y, color):
        if (not (x >= 0 and x < 8 and y >= 0 and y < 8)) or board[x][y] != COLOR_NONE:
            return False
        board[x][y] = color
        vaild = False
        for i in range(8):
            x1 = x + dir[i][0]
            y1 = y + dir[i][1]
            while 0 <= x1 and x1 < 8 and 0 <= y1 and y1 < 8 and board[x1][y1] == -color:
                x1 = x1 + dir[i][0]
                y1 = y1 + dir[i][1]
            if 0 <= x1 and x1 < 8 and 0 <= y1 and y1 < 8 and board[x1][y1] == color:
                xt = x1
                yt = y1
                while True:
                    x1 = x1 - dir[i][0]
                    y1 = y1 - dir[i][1]
                    if x1 == x and y1 == y:
                        break
                    vaild = True
                    board[x1][y1] = color
                if (dir[i][0] != 0 and dir[i][1] != 0):
                    self.Count = self.Count + abs(xt - x) - 1
                elif (dir[i][0] != 0):
                    self.Count = self.Count + abs(xt - x) - 1
                elif (dir[i][1] != 0):
                    self.Count = self.Count + abs(yt - y) - 1
        return vaild

    def check_out(self, chessboard, color):
        moves = []
        for i in range(8):
            for j in range(8):
                if chessboard[i][j] == 0:
                    newBoard = deepcopy(chessboard)
                    if self.place(newBoard, i, j, color):
                        moves.append((i, j))
        return moves

    def go(self, chessboard):
        self.starttime = time.time()
        self.candidate_list.clear()
        for movess in self.check_out(chessboard, self.color):
            self.candidate_list.append(movess)
        if (self.sumnum(board) <= 50):
            move, _ = self.minmax(chessboard, 4 , -1000000, 1000000, self.color, self.step)
        if (50 < self.sumnum(board) < 57):
            move, _ = self.minmax(chessboard, 4, -1000000, 1000000, self.color, self.step)
        if (self.sumnum(board) >= 57):
            move, _ = self.endminmax(chessboard, 7, -1000000, 1000000, self.color, self.step)
        if not move is None:
            self.candidate_list.append(move)
        self.step = self.step + 1
        print(self.candidate_list)

    # 博弈树
    def minmax(self, board, depth, alpha, beta, color, step):
        self_move = self.check_out(board, color)
        opp_move = self.check_out(board, -color)
        if (time.time() - self.starttime > self.time_out - 0.3):
            return None, self.evo(board, color)
        if depth <= 0:
            return None, self.evo(board, color)
        if (len(self_move) == 0):
            if (len(opp_move) == 0):
                return None, self.evo(board, color)
            else:
                _, score = self.minmax(board, depth - 1, -beta, -alpha, -color, step + 1)
                return None, -score
        max_move = None
        max_score = -1000000
        for move in self_move:
            new_board = deepcopy(board)
            newboard = self.makemove(new_board, move[0], move[1], color)
            _, score = self.minmax(newboard, depth - 1, -beta, -alpha, -color, step + 1)
            score = -score
            if score > alpha:
                alpha = score
                max_move = move
                if (beta <= alpha):
                    return max_move, score
        return max_move, alpha

    def endminmax(self, board, depth, alpha, beta, color, step):
        self_move = self.check_out(board, color)
        opp_move = self.check_out(board, -color)
        if (time.time() - self.starttime > self.time_out - 0.2):
            return None, self.evo(board, color)
        if depth <= 0:
            return None, self.endevo(board, color)
        if (len(self_move) == 0):
            if (len(opp_move) == 0):
                return None, self.endevo(board, color)
            else:
                _, score = self.minmax(board, depth - 1, -beta, -alpha, -color, step + 1)
                return None, -score
        max_move = None
        max_score = -1000000
        for move in self_move:
            new_board = deepcopy(board)
            newboard = self.makemove(new_board, move[0], move[1], color)
            _, score = self.minmax(newboard, depth - 1, -beta, -alpha, -color, step + 1)
            score = -score
            if score > alpha:
                alpha = score
                max_move = move
                if (beta <= alpha):
                    return max_move, score
        return max_move, alpha

    # 评估函数
    def endevo(self, board, color):
        score = 0
        for x in range(8):
            for y in range(8):
                if board[x][y] == -color:
                    sum = sum - 1
                if board[x][y] == color:
                    sum = sum + 1
        score = sum * 1000

    def evo(self, board, color):
        # 棋盘权重
        tempboard = deepcopy(board)
        cell_score = 0
        Vmap = [[1000, -100, 10, 5, 5, 10, -100, 1000],
                [-100, -400, 1, 1, 1, 1, -400, -100],
                [10, 1, 3, 2, 2, 3, 1, 10],
                [5, 1, 2, 1, 1, 2, 10, 50],
                [5, 1, 2, 1, 1, 2, 10, 50],
                [10, 1, 3, 2, 2, 3, 1, 10],
                [-100, -400, 1, 1, 1, 1, -400, -100],
                [1000, -100, 10, 5, 5, 10, -100, 1000]]
        for x in range(8):
            for y in range(8):
                if board[x][y] == color:
                    cell_score += Vmap[x][y]
                if board[x][y] == -color:
                    cell_score -= Vmap[x][y]

        self_moves = self.check_out(board, color)
        opponent_moves = self.check_out(board, -color)
        # 行动力
        freedom_score = len(self_moves) - len(opponent_moves)

        # 稳定子
        subcount = 0
        # 总分
        if (self.sumnum(board) <= 20):
            score = 50 * cell_score + 20 * freedom_score + 15 * self.possible_freedom(board, color)
        if (20 < self.sumnum(board) <= 40):
            score = cell_score + 35 * freedom_score + 20 * self.possible_freedom(board, color) + 200 * self.unturn(board, color)
        if (40 < self.sumnum(board)):
            score = cell_score + 20 * freedom_score + 10 * self.possible_freedom(board, color) + 200 * self.unturn(board, color)
        return score

    # 翻转的棋子
    def turnscore(self, board, color):
        self.Count = 0
        self_moves = self.check_out(board, color)
        selfcount = self.Count
        # self.Count = 0
        # opponent_moves = self.check_out(board,-color)
        # oppcount = self.Count
        go_score = (selfcount)
        return go_score

    def unturn(self, board, color):
        count = 0
        # 左上
        if (board[0][0] == color):
            len = 8
            for i in range(8):
                for j in range(len):
                    if board[i][j] == color:
                        count = count + 1
                    else:
                        len = j
                        break

        # 右上
        if (board[0][7] == color):
            len = -1
            for i in range(8):
                for j in range(7, len, -1):
                    if board[i][j] == color:
                        count = count + 1
                    else:
                        len = j
                        break
        # 左下
        if (board[7][0] == color):
            len = 8
            for i in range(7, -1, -1):
                for j in range(len):
                    if board[i][j] == color:
                        count = count + 1
                    else:
                        len = j
                        break
        # 右下
        if (board[7][7] == color):
            len = -1
            for i in range(7, -1, -1):
                for j in range(7, len, -1):
                    if board[i][j] == color:
                        count = count + 1
                    else:
                        len = j
                        break
        return count

    def sumnum(self, board):
        sum = 64
        for x in range(8):
            for y in range(8):
                if board[x][y] == COLOR_NONE:
                    sum = sum - 1
        return sum

    def possible_freedom(self, board, color):
        count = 0
        for i in range(8):
            for j in range(8):
                if board[i][j] == color:
                    for k in range(8):
                        if 0 <= i + dir[k][0] < 8 and 0 <= j + dir[k][1] < 8:
                            if board[i + dir[k][0]][j + dir[k][1]] == 0:
                                count -= 1
                if board[i][j] == -color:
                    for k in range(8):
                        if 0 <= i + dir[k][0] < 8 and 0 <= j + dir[k][1] < 8:
                            if board[i + dir[k][0]][j + dir[k][1]] == 0:
                                count += 1
        return count

    def bubble(self, move, weight):
        length = len(move)
        for i in range(length):
            for j in range(1, length - i):
                if weight[move[j - 1][0]][move[j - 1][1]] > weight[move[j][0]][move[j][1]]:
                    move[j - 1], move[j] = move[j], move[j - 1]
        return move


AI1 = AI(8, 1, 5)
board = np.zeros([8, 8])
board[2][2] = -1
board[2][1] = 1
board[2][3] = 1
board[3][2] = 1
board[1][2] = 1

if __name__ == "__main__":
    chessboard=[[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,-1,-1,0,0,0],[0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,1,0,0,0],[0,0,0,-1,1,0,0,0],[0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,-1,-1,0,0],[0,0,0,-1,-1,0,0,0],[0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,-1,-1,0,0],[0,0,0,-1,-1,0,0,0],[0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,-1,-1,0,0],[0,0,0,-1,-1,0,0,0],[0,0,1,1,-1,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,1,-1,-1,0,0],[0,0,0,1,-1,0,0,0],[0,0,1,1,-1,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,1,-1,-1,0,0],[0,0,0,1,-1,0,0,0],[0,0,1,1,-1,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,1,-1,-1,0,0],[0,0,0,1,1,1,0,0],[0,0,1,1,-1,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,1,-1,-1,0,0],[0,0,0,1,1,-1,0,0],[0,0,1,1,-1,0,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,1,-1,-1,0,0],[0,0,0,1,1,-1,0,0],[0,0,1,1,1,1,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,0,0],[0,0,0,-1,1,-1,0,0],[0,0,1,1,-1,1,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,0,0],[0,0,0,-1,1,1,1,0],[0,0,1,1,-1,1,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,0,0],[0,0,0,-1,-1,-1,-1,-1],[0,0,1,1,-1,1,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,0,1],[0,0,0,-1,-1,-1,1,-1],[0,0,1,1,-1,1,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,0,-1,-1,-1,-1,-1],[0,0,1,1,-1,1,-1,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,1,1,-1,1,1,1],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,1,1,-1,1,-1,1],[0,0,0,0,0,-1,0,-1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,1,1,-1,1,-1,1],[0,0,0,0,0,-1,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,1,1,-1,-1,-1,1],[0,0,0,0,-1,-1,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,1,1,1,1,1,1],[0,0,1,1,-1,-1,-1,1],[0,0,0,0,-1,-1,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,1,-1,1,1,1,1],[0,0,1,-1,-1,-1,-1,1],[0,0,0,-1,-1,-1,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,1,-1,1,1,1,1],[0,0,1,-1,-1,1,1,1],[0,0,0,-1,-1,-1,1,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,-1,-1,-1,-1,-1,1],[0,0,1,-1,1,1,-1,1],[0,0,1,-1,-1,1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,1],[0,0,-1,-1,-1,-1,1,1],[0,0,1,-1,1,1,-1,1],[0,0,1,-1,-1,1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,-1,1,1,-1,1],[0,0,1,-1,-1,1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,1,0,1],[0,-1,-1,-1,1,1,1,1],[0,0,-1,1,1,1,-1,1],[0,0,1,-1,-1,1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,1,-1,1],[0,0,1,-1,-1,1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,1,-1,1],[0,0,1,-1,1,1,-1,1],[0,0,0,-1,-1,1,-1,1],[0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,1,-1,-1,1],[0,0,0,-1,-1,-1,-1,1],[0,0,0,0,0,-1,1,1],[0,0,0,0,0,0,0,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,1,-1,-1,1],[0,0,1,1,1,1,1,1],[0,0,0,0,0,-1,1,1],[0,0,0,0,0,0,0,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,-1,-1,-1,1],[0,0,1,1,-1,-1,1,1],[0,0,0,0,-1,-1,1,1],[0,0,0,0,0,0,0,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,-1,-1,-1,1],[0,0,1,1,-1,-1,1,1],[0,0,0,0,-1,1,1,1],[0,0,0,0,1,0,0,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,-1,-1,-1,1],[0,0,1,1,-1,-1,1,1],[0,0,0,0,-1,-1,1,1],[0,0,0,0,1,-1,0,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,-1,-1,-1,1],[0,0,1,1,-1,-1,1,1],[0,0,0,0,-1,-1,1,1],[0,0,0,0,1,1,1,1]],[[0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,1,0,1],[0,-1,-1,-1,-1,-1,1,1],[0,0,-1,1,-1,-1,-1,1],[0,0,1,-1,-1,-1,-1,1],[0,0,1,-1,-1,-1,1,1],[0,0,0,-1,-1,-1,1,1],[0,0,0,0,1,1,1,1]],[[0,0,-1,0,0,0,0,0],[1,0,0,-1,-1,1,0,1],[0,1,-1,-1,-1,-1,1,1],[0,0,1,1,-1,-1,-1,1],[0,0,1,1,-1,-1,-1,1],[0,0,1,-1,1,-1,1,1],[0,0,0,-1,-1,1,1,1],[0,0,0,0,1,1,1,1]],[[0,0,-1,0,0,-1,0,0],[1,0,0,-1,-1,-1,0,1],[0,1,-1,-1,-1,-1,1,1],[0,0,1,1,-1,-1,-1,1],[0,0,1,1,-1,-1,-1,1],[0,0,1,-1,1,-1,1,1],[0,0,0,-1,-1,1,1,1],[0,0,0,0,1,1,1,1]],[[0,0,-1,0,1,-1,0,0],[1,0,0,-1,1,1,0,1],[0,1,-1,-1,1,-1,1,1],[0,0,1,1,1,-1,-1,1],[0,0,1,1,1,-1,-1,1],[0,0,1,-1,1,-1,1,1],[0,0,0,-1,-1,1,1,1],[0,0,0,0,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[0,1,-1,-1,1,-1,1,1],[0,0,1,1,1,-1,-1,1],[0,0,1,1,1,-1,-1,1],[0,0,1,-1,1,-1,1,1],[0,0,0,-1,-1,1,1,1],[0,0,0,0,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[0,1,-1,-1,1,-1,1,1],[0,0,1,1,1,-1,-1,1],[0,0,1,1,1,-1,1,1],[0,0,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[0,1,-1,-1,1,-1,1,1],[0,-1,-1,-1,-1,-1,-1,1],[0,0,1,1,1,-1,1,1],[0,0,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[1,1,-1,-1,1,-1,1,1],[0,1,-1,-1,-1,-1,-1,1],[0,0,1,1,1,-1,1,1],[0,0,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[1,1,-1,-1,1,-1,1,1],[0,-1,-1,-1,-1,-1,-1,1],[-1,0,1,1,1,-1,1,1],[0,0,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[1,1,-1,-1,1,-1,1,1],[0,1,-1,-1,-1,-1,-1,1],[-1,1,1,1,1,-1,1,1],[0,0,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[1,1,-1,-1,1,-1,1,1],[0,1,-1,-1,-1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[0,-1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[1,1,-1,-1,1,-1,1,1],[0,1,-1,-1,-1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,0,0,-1,-1,1,0,1],[1,1,-1,-1,1,-1,1,1],[-1,-1,-1,-1,-1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[0,0,-1,-1,-1,-1,0,0],[1,1,0,-1,-1,1,0,1],[1,1,1,-1,1,-1,1,1],[-1,-1,-1,1,-1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[-1,0,-1,-1,-1,-1,0,0],[-1,1,0,-1,-1,1,0,1],[-1,1,1,-1,1,-1,1,1],[-1,-1,-1,1,-1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[-1,0,-1,-1,-1,-1,0,0],[-1,1,0,-1,-1,1,1,1],[-1,1,1,-1,1,1,1,1],[-1,-1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[-1,0,-1,-1,-1,-1,0,0],[-1,-1,-1,-1,-1,1,1,1],[-1,-1,-1,-1,1,1,1,1],[-1,-1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[-1,1,-1,-1,-1,-1,0,0],[-1,1,1,-1,-1,1,1,1],[-1,1,-1,1,1,1,1,1],[-1,1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1]],[[-1,1,-1,-1,-1,-1,0,0],[-1,1,1,-1,-1,1,1,1],[-1,1,-1,1,1,1,1,1],[-1,1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,-1,1,1,1],[0,0,0,-1,1,1,1,1],[0,0,-1,1,1,1,1,1]],[[-1,1,-1,-1,-1,-1,0,0],[-1,1,1,-1,-1,1,1,1],[-1,1,-1,1,1,1,1,1],[-1,1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[1,1,1,1,-1,1,1,1],[0,0,1,1,1,1,1,1],[0,0,-1,1,1,1,1,1]],[[-1,1,-1,-1,-1,-1,0,0],[-1,1,1,-1,-1,1,1,1],[-1,1,-1,1,1,1,1,1],[-1,1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[-1,-1,1,1,-1,1,1,1],[-1,0,1,1,1,1,1,1],[0,0,-1,1,1,1,1,1]],[[-1,1,-1,-1,-1,-1,0,0],[-1,1,1,-1,-1,1,1,1],[-1,1,-1,1,1,1,1,1],[-1,1,-1,1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[-1,-1,1,1,-1,1,1,1],[-1,0,1,1,1,1,1,1],[0,1,1,1,1,1,1,1]],[[-1,1,-1,-1,-1,-1,-1,0],[-1,1,1,-1,-1,-1,-1,1],[-1,1,-1,1,-1,1,-1,1],[-1,1,-1,-1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[-1,-1,1,1,-1,1,1,1],[-1,0,1,1,1,1,1,1],[0,1,1,1,1,1,1,1]],[[-1,1,1,1,1,1,1,1],[-1,1,1,-1,-1,-1,1,1],[-1,1,-1,1,-1,1,-1,1],[-1,1,-1,-1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[-1,-1,1,1,-1,1,1,1],[-1,0,1,1,1,1,1,1],[0,1,1,1,1,1,1,1]],[[-1,1,1,1,1,1,1,1],[-1,1,1,-1,-1,-1,1,1],[-1,1,-1,1,-1,1,-1,1],[-1,1,-1,-1,1,-1,-1,1],[-1,1,-1,1,1,-1,1,1],[-1,1,1,1,-1,1,1,1],[-1,1,1,1,1,1,1,1],[0,1,1,1,1,1,1,1]]]
    ai = AI(chessboard, -1, 100)
    ai.go(chessboard[21])
